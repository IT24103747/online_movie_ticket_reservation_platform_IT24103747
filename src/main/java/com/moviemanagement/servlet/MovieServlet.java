package com.moviemanagement.servlet;

import com.moviemanagement.model.Movie;
import com.moviemanagement.service.MovieService;
import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.annotation.*;
import java.io.*;
import java.time.*;
import java.net.URLEncoder;

@WebServlet("/movies")
public class MovieServlet extends HttpServlet {
    private MovieService movieService;

    @Override
    public void init() {
        movieService = new MovieService();
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            String action = request.getParameter("action");
            if (action == null) action = "list";

            switch (action) {
                case "new": showNewForm(request, response); break;
                case "edit": showEditForm(request, response); break;
                case "delete": deleteMovie(request, response); break;
                default: listMovies(request, response);
            }
        } catch (Exception e) {
            request.setAttribute("error", "Error: " + e.getMessage());
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getParameter("action");

        try {
            if ("add".equals(action)) {
                // Get form parameters for add
                String title = request.getParameter("title");
                String description = request.getParameter("description");
                LocalDate releaseDate = LocalDate.parse(request.getParameter("releaseDate"));
                boolean available = Boolean.parseBoolean(request.getParameter("available"));

                // Create new movie (ID will be generated by service)
                Movie newMovie = new Movie(null, title, description, releaseDate, available);

                // Add through service layer
                movieService.addMovie(newMovie);

                // Redirect to movie list
                response.sendRedirect(request.getContextPath() + "/movies");
                return;
            }
            else if ("update".equals(action)) {
                // Get all parameters for update
                String id = request.getParameter("id");
                String title = request.getParameter("title");
                String description = request.getParameter("description");
                LocalDate releaseDate = LocalDate.parse(request.getParameter("releaseDate"));
                boolean available = Boolean.parseBoolean(request.getParameter("available"));

                // Create updated movie object
                Movie updatedMovie = new Movie(id, title, description, releaseDate, available);

                // Update through service layer
                movieService.updateMovie(updatedMovie);

                // Redirect to movie list
                response.sendRedirect(request.getContextPath() + "/movies");
                return;
            }
        } catch (Exception e) {
            // Log the error
            e.printStackTrace();

            // Set error message
            request.setAttribute("error", "Operation failed: " + e.getMessage());

            // Forward back to appropriate page based on action
            if ("add".equals(action)) {
                request.getRequestDispatcher("/add.html").forward(request, response);
            } else if ("update".equals(action)) {
                request.setAttribute("movie", movieService.getMovieById(request.getParameter("id")));
                request.getRequestDispatcher("/edit.jsp").forward(request, response);
            } else {
                // Handle unexpected action (optional)
                response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Unknown action");
            }
        }
    }
    private void listMovies(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.setAttribute("movies", movieService.getMoviesSortedByReleaseDate());
        request.getRequestDispatcher("/index.jsp").forward(request, response);
    }

    private void showNewForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        request.getRequestDispatcher("/html/add.html").forward(request, response);
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String id = request.getParameter("id");
        Movie movie = movieService.getMovieById(id);

        if (movie == null) {
            response.sendRedirect(request.getContextPath() + "/movies?error=Movie not found");
            return;
        }

        // Pass data as URL parameters
        response.sendRedirect(request.getContextPath() + "/html/edit.html?" +
                "id=" + URLEncoder.encode(movie.getId(), "UTF-8") +
                "&title=" + URLEncoder.encode(movie.getTitle(), "UTF-8") +
                "&description=" + URLEncoder.encode(movie.getDescription(), "UTF-8") +
                "&releaseDate=" + movie.getReleaseDate() +
                "&available=" + movie.isAvailable());
    }

    private void addMovie(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        String title = request.getParameter("title");
        String description = request.getParameter("description");
        LocalDate releaseDate = LocalDate.parse(request.getParameter("releaseDate"));
        boolean available = Boolean.parseBoolean(request.getParameter("available"));

        Movie newMovie = new Movie(null, title, description, releaseDate, available);
        movieService.addMovie(newMovie);
        response.sendRedirect(request.getContextPath() + "/movies");
    }

    private void updateMovie(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        try {
            String id = request.getParameter("id");
            String title = request.getParameter("title");
            String description = request.getParameter("description");
            LocalDate releaseDate = LocalDate.parse(request.getParameter("releaseDate"));
            boolean available = Boolean.parseBoolean(request.getParameter("available"));

            Movie updatedMovie = new Movie(id, title, description, releaseDate, available);
            movieService.updateMovie(updatedMovie);

            // Redirect to list after update
            response.sendRedirect(request.getContextPath() + "/movies?action=list");
        } catch (Exception e) {
            request.setAttribute("error", "Update failed: " + e.getMessage());
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
    }

    private void deleteMovie(HttpServletRequest request, HttpServletResponse response)
            throws IOException, ServletException {
        String id = request.getParameter("id");
        movieService.deleteMovie(id);
        response.sendRedirect(request.getContextPath() + "/movies");
    }
}


